{"name":"mxframework","tagline":"MagicCube MXFramework","body":"# ![](https://raw.githubusercontent.com/MagicCube/mxframework-core/master/res/images/mx-logo-32.png) MXFramework\r\nMagicCube MXFramework is a lightweight Object-Oriented JavaScript framework.\r\n\r\n## Quick Examples\r\nLike many other JavaScript frameworks, MXFramework has its own way to define namespace, class and component.\r\nIn this quick example, we will demonstrate how to define classes using MXFramework.\r\n\r\nFirstly, let's create a new class named Animal.\r\n```javascript\r\nscripts/my/namespace/Animal.js\r\n\r\n/* \r\n * Define a namespace.\r\n */\r\n$ns(\"my.namespace\");\r\n\r\n/**\r\n * Define a class which extends MXComponent.\r\n * A MXComponent is a very popular super class.\r\n * Actually, in this case, we can also use MXObject instead.\r\n * MXObject is the super class of MXComponent.\r\n */\r\nmy.namespace.Animal = function()\r\n{\r\n\t/**\r\n\t * In MXFramework, it always use 'me' instead of 'this'.\r\n\t */\r\n\tvar me = $extend(MXComponent);\r\n\t/**\r\n\t * 'base' is almost the same as 'super' in Java.\r\n\t */\r\n\tvar base = {};\r\n\r\n\r\n\t/**\r\n\t * Define a public field.\r\n\t * Every public member should under 'me'.\r\n\t */\r\n\tme.name = null;\r\n\r\n\t/**\r\n\t * Define a private field.\r\n\t * The names of a private members always start with an underline.\r\n\t */\r\n\t var _something = null;\r\n\t var _someVariable = 0;\r\n\r\n\r\n\t/**\r\n\t * Override a public method.\r\n\t * 'init' method will be automatically called immediately after the instance is created.\r\n\t * Even though, you can also set the 'autoInit' field to false if you need lazy intialization.\r\n\t */\r\n\tbase.init = me.init;\r\n\tme.init = function(p_options)\r\n\t{\r\n\t\tbase.init(p_options);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Define a public function.\r\n\t */\r\n\tme.sayHi = function()\r\n\t{\r\n\t\tif (_canSayHi())\r\n\t\t{\r\n\t\t\t/* \r\n\t\t\t  String.format provides ability to substitute string with JSON object or array.\r\n\t\t\t  In MXFramework you can use the following format methods.\r\n\t\t\t  - String.format    String.format(\"Hi, {name}!\", { name: \"Henry\" }); String.format(\"Hi, {0}\", [ \"Henry\" ])\r\n\t\t\t  - Date.format      Date.format(new Date(), \"yyyy-MM-dd HH:mm:ss\"); Date.format(new Date(), \"yy年M月d日\");\r\n\t\t\t  - Number.format    Number.format(12.53212, \"0.00\"); Number.format(123, \"00000000\");\r\n\t\t\t */\r\n\t\t\treturn String.format(\"Hi, I'm a {name}\", { name: me.name });\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Define a private function.\r\n\t */\r\n\tfunction _canSayHi()\r\n\t{\r\n\t\t// MXFramework has a series of methods for type assertions.\r\n\t\treturn isString(me.name);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * This is the end of class.\r\n\t */\r\n\treturn me.endOfClass(arguments);\r\n};\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nLet's have a class inherits from Animal.\r\n\r\n```javascript\r\nscripts/your/namespace/Cat.js\r\n\r\n$ns(\"your.namespace\");\r\n\r\n// Import the super class.\r\n$import(\"my.namespace.Animal\");\r\n\r\n/**\r\n * Cat inherits from Animal.\r\n */\r\nyour.namespace.Cat = function()\r\n{\r\n\tvar me = $extend(my.namespace.Animal);\r\n\t/*\r\n\t * Change the initial value of name.\r\n\t */\r\n\tme.name = \"Cat\";\r\n\tvar base = {};\r\n\r\n\tme.nickName = \"kitty\";\r\n\r\n\tbase.init = me.init;\r\n\tme.init = function(p_options)\r\n\t{\r\n\t\tbase.init(p_options);\r\n\t\tif (isEmptyString(me.nickName) && isString(me.name))\r\n\t\t{\r\n\t\t\tme.nickName = me.name;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Override 'sayHi' method.\r\n\t */\r\n\tbase.sayHi = me.sayHi;\r\n\tme.sayHi = function()\r\n\t{\r\n\t\t// $format is a shortcut to String.format, Date.format and Number.format.\r\n\t\treturn base.sayHi() + $format(\" You can call me {0}\", [ me.nickName ]);\r\n\t};\r\n\r\n\treturn me.endOfClass(arguments);\r\n};\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nNow we need to instantialize the class.\r\n```JavaScript\r\n// Import Cat class. The Animal class will be automatically imported with Cat.\r\n$import(\"your.namespace.Cat\");\r\n\r\n// Create a new instance with default values.\r\nvar cat = new your.namespace.Cat();\r\nalert(cat.sayHi());\r\n\r\n// Create a new instance with initial values using JSON.\r\n// In MXFramework, class only accepts JSON object as constructure parameter.\r\nvar tomCat = new your.namespace.Cat({\r\n    nickName: \"Tom\"\r\n});\r\nalert(tomCat.sayHi());\r\n```\r\n\r\nFinally, build the code with mxbuild or mxtool to generate min.js and min.css\r\n```\r\njar mxbuild.jar your;my\r\n```\r\n\r\n\r\n## Source Code Repository\r\nThe source is available for download from GitHub\r\nhttps://github.com/MagicCube/mxframework-core\r\n\r\n## Documents\r\nFor documents, see https://github.com/MagicCube/mxframework-core/wiki\r\n\r\n## Related Projects\r\n* [mxframework-node](https://github.com/MagicCube/mxframework-node) - MagicCube MXFramework for Node.js\r\n* [mxtool](https://github.com/MagicCube/mxtool) - Development tools for MagicCube MXFramework\r\n* [g3d](https://github.com/MagicCube/g3d) - A web GIS library for 3D visualization using WebGL technology\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}